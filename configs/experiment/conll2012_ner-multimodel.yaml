# @package _global_

# to execute this experiment run:
# python train.py experiment=conll2012_ner-multimodel

defaults:
  - override /dataset: conll2012_prepared_for_ner.yaml
  - override /datamodule: default.yaml
  - override /taskmodule: transformer_token_classification.yaml
  - override /model: multi_model_token_classification.yaml
  - override /callbacks: default.yaml
  - override /logger: wandb.yaml
  - override /trainer: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
name: "conll2012/multi_model_token_classification"

tags: ["dataset=conll2012", "model=multi_model_token_classification"]

seed: 12345

trainer:
  min_epochs: 5
  max_epochs: 20
  # gradient_clip_val: 0.5

transformer_model: bert-base-cased

taskmodule:
  tokenizer_name_or_path: ${transformer_model}
  partition_annotation: sentences

datamodule:
  batch_size: 32

model:
  model_name: ${transformer_model}
  # This should be a mapping from an arbitrary model identifier to a pretrained model name or path
  # that can be loaded with Huggingface AutoModel.from_pretrained.
  pretrained_models:
    bert-base-cased-ner-ontonotes: "models/pretrained/bert-base-cased-ner-ontonotes"
    bert-base-cased-re-tacred: "models/pretrained/bert-base-cased-re-tacred"
    coreference: "models/pretrained/coreference"
  pretrained_configs:
    bert-base-cased-re-tacred:
      vocab_size: 29000
  # freeze_models:
  #  - bert-base-cased-ner-ontonotes
  # configure learning rate. Default learning rate is set in model constructor (here: TransformerTokenClassificationModel)
  learning_rate: 1e-5
